{"version":3,"sources":["Slide.js","App.js","serviceWorker.js","index.js"],"names":["Slide","react_default","a","createElement","className","concat","this","props","active","style","display","undefined","index","total","src","width","Component","images","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","activeSlide","currentSlide","bind","assertThisInitialized","id","length","setState","prevState","color","textShadow","href","fontStyle","fontWeight","map","item","i","src_Slide","key","onClick","textAlign","console","log","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAgBeA,0LAVP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAC,OAAcC,KAAKC,MAAMC,OAAS,SAAW,QAAUC,MAAO,CAACC,QAASJ,KAAKC,MAAMC,OAAU,aAAUG,IACjHV,EAAAC,EAAAC,cAAA,OAAKC,UAAW,cAAhB,GAAAC,OAAkCC,KAAKC,MAAMK,MAAO,EAApD,KAAAP,OAAyDC,KAAKC,MAAMM,QACpEZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKR,KAAKC,MAAMO,IAAKL,MAAO,CAACM,MAAM,kBAPpCC,cCEdC,EAAqB,CAAC,CAACH,IAAQ,cACrC,CAACA,IAAQ,cACT,CAACA,IAAQ,cACT,CAACA,IAAQ,cACT,CAACA,IAAQ,cACT,CAACA,IAAQ,cACT,CAACA,IAAQ,eAgGMI,cA7Fb,SAAAA,EAAYX,GACZ,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAd,KAAAY,IACEC,EAAAC,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAlB,KAAMC,KACDkB,MAAQ,CACXC,YAAc,GAEhBP,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,CAAAD,IALtBA,4EAQaW,GAIPA,GAAMb,EAAOc,OACfD,EAAK,EACKA,EAAK,IACfA,EAAKb,EAAOc,OAAO,GAErBzB,KAAK0B,SAAS,SAACC,GAAD,MAAe,CAACP,YAAaI,sCAI3C,OACE7B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,QAAMM,MAAO,CAACyB,MAAO,QAASC,WAAY,yBAA1C,WAAiFlC,EAAAC,EAAAC,cAAA,QAAMM,MAAO,CAACyB,MAAO,QAASC,WAAY,yBAA1C,UAEjFlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,KAAGiC,KAAK,aAAR,YACAnC,EAAAC,EAAAC,cAAA,KAAGiC,KAAK,eAAR,cACAnC,EAAAC,EAAAC,cAAA,KAAGiC,KAAK,cAAR,oBAKJnC,EAAAC,EAAAC,cAAA,OAAK2B,GAAG,WAAW1B,UAAU,oBAC3BH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,kBAASF,EAAAC,EAAAC,cAAA,QAAMM,MAAO,CAAC4B,UAAW,SAAUC,WAAY,SAA/C,kBAAT,0EACArC,EAAAC,EAAAC,cAAA,yFACAF,EAAAC,EAAAC,cAAA,oEAKFF,EAAAC,EAAAC,cAAA,OAAK2B,GAAG,YAAY1B,UAAU,WAC5BH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,iEAKFF,EAAAC,EAAAC,cAAA,OAAK2B,GAAG,SAAS1B,UAAU,uBAEvBa,EAAOsB,IAAI,SAASC,EAAMC,GACxB,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,CAAOC,IAAK,SAASF,EAAG5B,MAAOI,EAAOc,OAAQjB,IAAK0B,EAAK1B,IAAKF,MAAO6B,EAAGjC,OAAQiC,IAAMnC,KAAKmB,MAAMC,eACvGE,KAAKtB,OAITL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,OAAOwC,QAAS,WAAWtC,KAAKqB,aAAarB,KAAKmB,MAAMC,YAAa,IAAIE,KAAKtB,OAA3F,UACAL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,OAAOwC,QAAS,WAAWtC,KAAKqB,aAAarB,KAAKmB,MAAMC,YAAa,IAAIE,KAAKtB,OAA3F,WAIFL,EAAAC,EAAAC,cAAA,OAAKM,MAAO,CAACC,QAAS,OAASmC,UAAY,WAEvC5B,EAAOsB,IAAI,SAASC,EAAK5B,GACvB,OAAOX,EAAAC,EAAAC,cAAA,QAAMwC,IAAK,OAAO/B,EAAOR,UAAW,MAAQwC,QAAS,WAC1DE,QAAQC,IAAI,aACZzC,KAAKqB,aAAaf,IAClBgB,KAAKtB,SACPsB,KAAKtB,QAKXL,EAAAC,EAAAC,cAAA,OAAK2B,GAAG,aAAa1B,UAAU,sBAC7BH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,wFAEEF,EAAAC,EAAAC,cAAA,KAAGiC,KAAK,kBAAR,8BAAoDnC,EAAAC,EAAAC,cAAA,4BACpDF,EAAAC,EAAAC,cAAA,KAAGiC,KAAK,kBAAR,aAAmCnC,EAAAC,EAAAC,cAAA,qCAnF7Ba,aCAEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6a845eba.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\nclass Slide extends Component {\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div className={`mySlides ${this.props.active ? 'active' : 'fade'}`} style={{display: this.props.active ?  'block' : undefined}}>\r\n                <div className={\"numbertext\"}>{`${this.props.index +1}/${this.props.total}`}</div>\r\n                <img src={this.props.src} style={{width:'100%'}}></img>\r\n                {/* <div className={\"text\"}>Caption Text</div> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Slide; ","import React, { Component } from 'react';\nimport './App.css';\nimport Slide from './Slide.js';\n\nconst images =             [{'src' : '/img1.jpeg'},\n{'src' : '/img2.jpeg'},\n{'src' : '/img3.jpeg'},\n{'src' : '/img4.jpeg'},\n{'src' : '/img5.jpeg'},\n{'src' : '/img6.jpeg'},\n{'src' : '/img7.jpeg'}];\n\nclass App extends Component {\n  constructor(props) \n  {\n    super(props);\n    this.state = {\n      activeSlide : 0 \n    }\n    this.currentSlide = this.currentSlide.bind(this);\n  }\n  \n  currentSlide(id)\n  {\n    // console.log(id)\n\n    if( id >= images.length){\n      id = 0 ; \n    } else if ( id < 0) {\n      id = images.length-1;\n    }\n    this.setState((prevState)=> ({activeSlide: id}));\n  }\n\n  render() {\n    return (\n      <div>\n        <header className=\"header\">\n          <h1>\n          <span style={{color: \"green\", textShadow: \"-2px -1px 10px green\"}}>Gypwell</span><span style={{color: \"black\", textShadow: \"-2px -1px 10px black\"}}>Decor</span>\n          </h1>\n          <div className=\"links\">\n            <a href=\"#about-us\">About Us</a>\n            <a href=\"#contact-us\">Contact Us</a>\n            <a href=\"#worksites\">Our Work Sites</a>\n          </div>\n\n        </header>\n        \n        <div id=\"about-us\" className=\"about-us content\">\n          <h3>About Us</h3>\n          <p>We at <span style={{fontStyle: \"italic\", fontWeight: \"bold\"}}>Gypwell Decors</span> focus more on quality of work delivered, though we are less in number</p> \n          <p>Our employees strive to deliver the best at a minimum cost to the customers </p>\n          <p>This makes a unique stand for us among our competitors</p>\n        </div>\n\n\n\n        <div id=\"worksites\" className=\"content\">\n          <h3>Work Sites</h3>\n          <p>Here is a few worksites we have completed as of now</p>\n\n        </div>\n\n\n        <div id=\"slides\" className=\"slideshow-container\">\n          {\n            images.map(function(item, i){\n              return <Slide key={'slide_'+i} total={images.length} src={item.src} index={i} active={i === this.state.activeSlide}/>;\n            }.bind(this))\n  \n          }\n\n          <a className=\"prev\" onClick={function(){this.currentSlide(this.state.activeSlide -1)}.bind(this)}>&#10094;</a>\n          <a className=\"next\" onClick={function(){this.currentSlide(this.state.activeSlide +1)}.bind(this)}>&#10095;</a>\n\n        </div>\n        \n        <div style={{display: \"none\" , \"textAlign\":\"center\"}}>\n          {\n            images.map(function(item,index){\n              return <span key={'dot '+index} className={\"dot\" } onClick={function(){\n                console.log('here.....')\n                this.currentSlide(index)\n              }.bind(this) }></span> \n            }.bind(this))\n          }\n        </div>\n\n                \n        <div id=\"contact-us\" className=\"contact-us content\">\n          <h3>Contact Us</h3>\n          <p>885c/3, Near popular Hyundai, Thirurkkad, \n            Perinthalmanna, Malappuram-679321</p>\n            <a href=\"tel:8606858236\">More queries reach, Dinesh <span>@8606858236</span></a>\n            <a href=\"tel:9961666472\"> or Manoj <span>@9961666472</span></a>\n\n        </div>\n\n\n    </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}